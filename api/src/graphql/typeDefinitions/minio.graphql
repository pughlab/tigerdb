# Types used for multi-part forms uploading files
scalar Upload

type Mismatch {
  lineNumber: Int
  fileA: String
  fileB: String
}

type FileValidation {
  isValid: Boolean!
  message: String
  mismatches: [Mismatch]
}

type File @exclude {
  filename: String!
  mimetype: String!
  encoding: String!
}

# Type used for keeping track of what MinioObjects exist
type MinioUpload {
  bucketName: ID!
  objectName: ID! @id
  filename: String!
  presignedURL: String @customResolver

  dataset: Dataset @relationship(type: "HAS_FILE", direction: IN)
  processedDataset: ProcessedDataset @relationship(type: "HAS_PROCESSED_FILE", direction: OUT)

  # rawdataFileDataset: Dataset @relationship(type: "HAS_RAWDATAFILE", properties: "HasRawdatafile", direction: IN)
  # codeBookDataset: Dataset @relationship(type: "HAS_CODEBOOK", properties: "HasCodebook", direction: IN)

  # pairedCodebook: MinioUpload @relationship(type: "HAS_PAIRED_RAWDATAFILE", properties: "HasPairedRawdatafile", direction: OUT)
  # pairedRawdataFile: MinioUpload @relationship(type: "HAS_PAIRED_CODEBOOK", properties: "HasPairedCodebook", direction: OUT)

  # fromExportTask: Task @relationship(type: "FROM_FUNNEL_TASK", direction: IN)
}

input MinioUploadInput {
  bucketName: ID!
  objectName: ID!
  filename: String!
}

extend type MinioUpload @auth(
  rules: [{
      isAuthenticated: true,
    }]
)

# interface HasPairedRawdatafile @relationshipProperties {
#     validated: Boolean!
# }

# interface HasPairedCodebook @relationshipProperties {
#     validated: Boolean!
# }

type MinioBucket {
  bucketName: ID!
  minioObjects: [MinioUpload!]! @relationship(type: "HAS_MINIO_OBJECT", direction: OUT)
}

extend type MinioBucket @auth(
  rules: [{
      isAuthenticated: true,
    }]
)

type Header {
  name: String!
  index: Int!
  processedDataset: ProcessedDataset @relationship(type: "HAS_HEADER", direction: IN) 
}

input HeaderInput {
  name: String!
  index: Int!
}

input ProcessedDatasetCreateInput {
  bucketName: ID!
  objectName: ID!
  filename: String!
  headers: [HeaderInput!]!  # Store processed headers
  rows: Int!                # Number of rows processed
  createdAt: DateTime!       # Timestamp
  # presignedURL: String!
  selectedDelimiter: String!
  includesHeader: Boolean!
}

type ProcessedDataset {
  bucketName: ID!
  objectName: ID! 
  filename: String!
  # headers: [Header!]!  # Store processed headers
  headers: [Header!]! @relationship(type: "HAS_HEADER", direction: OUT)
  rows: Int!           # Number of rows processed
  createdAt: DateTime! # Timestamp
  # curatedDataset: CuratedDataset @relationship(type: "GENERATED_CURATED_DATASET", direction: OUT)
  # presignedURL: String!
  minioUpload: MinioUpload @relationship(type: "HAS_PROCESSED_FILE", direction: IN)
  selectedDelimiter: String!
}

type Mutation {
  # Example usage (should be generalized)
  minioUploadFile(bucketName: String!, file: Upload!, datasetID: ID!): MinioUpload!
  minioDelete(bucketName: String!, objectName: String!): Boolean
  uploadProcessedHeaders(
    bucketName: String!,
    objectName: String!,
    filename: String!,
    headers: [HeaderInput!]!,
    selectedDelimiter: String!,
    includesHeader: Boolean!,
  ): MinioUpload
  validateRawdatafile(datasetID: ID!, objectName: ID!): FileValidation
  validateCodebook(datasetID: ID!, objectName: ID!): FileValidation
  validateRawfileCodebookPair(DatasetIDRF: ID!, objectNameRF: ID!, DatasetIDCB: ID!, objectNameCB: ID!): FileValidation
}