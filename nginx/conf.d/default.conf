upstream keycloak_backend {
  server keycloak:8080;
}

upstream graphql_backend {
  server api:4001;
}

upstream ui_backend {
  server ui:3001 fail_timeout=20s max_fails=100;
}

upstream neo4j_backend {
  server neo4j:7474;
}

# upstream funnel_backend {
#   server funnel:8003;
# }

upstream minioapi_backend {
  server minio:9000;
}

upstream minioconsole_backend {
  server minio:9001;
}

server {
	listen 80 default_server;
	listen [::]:80 default_server;
	server_name _;

      # To allow special characters in headers
      ignore_invalid_headers off;

      location /browser/ {
            proxy_pass "http://neo4j_backend";
      }

          
      # # funnel
      # # location ~* (static|v1|tasks|nodes|service-info) {
      # location ~* /(tasks|nodes|service-info|static/js/2.ba7f4428.chunk.js|static/js/main.32d9c83c.chunk.js|static/css/main.76ff40f4.chunk.css) {
      #       proxy_pass "http://funnel_backend";
      # }

      # minioconsole
      # location ~* (minio|minioconsole|styles|images|static|login|Loader.svg|api|ws) {
      location ~* /(minio|styles|images|static|login|Loader.svg|api|ws/objectManager) {


            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";

            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;
            proxy_request_buffering off;

            add_header Strict-Transport-Security "max-age=63072000; preload";

            index index.html index.htm;

            charset utf-8;

            proxy_pass "http://minioconsole_backend";

            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            proxy_set_header Connection "";
            chunked_transfer_encoding off;

            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            # proxy_set_header Content-Length "";
      }

      location = / {
	      return 301 https://$host$request_uri;
      }

      

      # minioapi
      location / {


            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";

            # Allow any size file to be uploaded.
            # Set to a value such as 1000m; to restrict file size to a specific value
            client_max_body_size 0;
            # To disable buffering
            proxy_buffering off;
            proxy_request_buffering off;

            add_header Strict-Transport-Security "max-age=63072000; preload";

            index index.html index.htm;

            charset utf-8;

            proxy_pass "http://minioapi_backend";

            real_ip_header X-Real-IP;
            proxy_connect_timeout 300;
            
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            proxy_set_header Connection "";
            chunked_transfer_encoding off;

            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            # proxy_set_header Content-Length "";
      }
}

server {
    # listen 80 default_server;
    # listen [::]:80 default_server;
    # server_name _;
  
    listen       443 ssl;
    server_name  localhost;

    ssl_certificate  /etc/nginx/certs/bundle.crt;
    ssl_certificate_key /etc/nginx/certs/bundle.key;

    ssl_protocols TLSv1.1 TLSv1.2;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location /auth/ {
          # fixed "too big header" on registration
          proxy_busy_buffers_size   512k;
          proxy_buffers   4 512k;
          proxy_buffer_size   256k;

          proxy_pass "http://keycloak_backend/auth/";
          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host $server_name;
    }
    location /auth/admin {
          proxy_pass "http://keycloak_backend/auth/admin";
          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host $server_name;
    }
    location /graphql {
          proxy_pass "https://graphql_backend/graphql/";
          proxy_set_header   Host $host;
          proxy_set_header   X-Real-IP $remote_addr;
          proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header   X-Forwarded-Host $server_name;
          client_max_body_size 0;
    }
    location /dev {
          return 302 /dev/;
    }
    location /dev/ {
          proxy_pass "https://ui_backend/";
    }
    location /sockjs-node/ {
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;

        proxy_pass "https://ui_backend";
        proxy_redirect off;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";  
    }
#     location /browser/ {
#           proxy_pass "http://neo4j_backend";
#     }

      location ~* /(docs) {
            root   /usr/src/app/;
            index  index.html index.htm;
      }

      location / {
            root   /usr/src/app/dist;
            index  index.html index.htm;
      }

    #error_page  404              /404.html;
    error_page  404              /;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
